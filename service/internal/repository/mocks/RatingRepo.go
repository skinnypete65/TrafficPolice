// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	domain "TrafficPolice/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// RatingRepo is an autogenerated mock type for the RatingRepo type
type RatingRepo struct {
	mock.Mock
}

// ClearRating provides a mock function with given fields:
func (_m *RatingRepo) ClearRating() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClearRating")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetExpertsRating provides a mock function with given fields: minSolvedCases
func (_m *RatingRepo) GetExpertsRating(minSolvedCases int) ([]domain.ExpertRating, error) {
	ret := _m.Called(minSolvedCases)

	if len(ret) == 0 {
		panic("no return value specified for GetExpertsRating")
	}

	var r0 []domain.ExpertRating
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.ExpertRating, error)); ok {
		return rf(minSolvedCases)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.ExpertRating); ok {
		r0 = rf(minSolvedCases)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ExpertRating)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(minSolvedCases)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRating provides a mock function with given fields:
func (_m *RatingRepo) GetRating() ([]domain.RatingInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRating")
	}

	var r0 []domain.RatingInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.RatingInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.RatingInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.RatingInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolvedCaseDecisions provides a mock function with given fields: caseDecision
func (_m *RatingRepo) GetSolvedCaseDecisions(caseDecision domain.CaseDecisionInfo) ([]domain.ExpertCaseDecision, error) {
	ret := _m.Called(caseDecision)

	if len(ret) == 0 {
		panic("no return value specified for GetSolvedCaseDecisions")
	}

	var r0 []domain.ExpertCaseDecision
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.CaseDecisionInfo) ([]domain.ExpertCaseDecision, error)); ok {
		return rf(caseDecision)
	}
	if rf, ok := ret.Get(0).(func(domain.CaseDecisionInfo) []domain.ExpertCaseDecision); ok {
		r0 = rf(caseDecision)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ExpertCaseDecision)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.CaseDecisionInfo) error); ok {
		r1 = rf(caseDecision)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertExpertId provides a mock function with given fields: expertID
func (_m *RatingRepo) InsertExpertId(expertID string) error {
	ret := _m.Called(expertID)

	if len(ret) == 0 {
		panic("no return value specified for InsertExpertId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(expertID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetRating provides a mock function with given fields: decisions
func (_m *RatingRepo) SetRating(decisions []domain.ExpertCaseDecision) error {
	ret := _m.Called(decisions)

	if len(ret) == 0 {
		panic("no return value specified for SetRating")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]domain.ExpertCaseDecision) error); ok {
		r0 = rf(decisions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCompetenceSkills provides a mock function with given fields: infos
func (_m *RatingRepo) UpdateCompetenceSkills(infos []domain.UpdateCompetenceSkill) error {
	ret := _m.Called(infos)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCompetenceSkills")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]domain.UpdateCompetenceSkill) error); ok {
		r0 = rf(infos)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRatingRepo creates a new instance of RatingRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRatingRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *RatingRepo {
	mock := &RatingRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
