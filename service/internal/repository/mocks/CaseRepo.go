// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	domain "TrafficPolice/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CaseRepo is an autogenerated mock type for the CaseRepo type
type CaseRepo struct {
	mock.Mock
}

// GetCaseByID provides a mock function with given fields: caseID
func (_m *CaseRepo) GetCaseByID(caseID string) (domain.Case, error) {
	ret := _m.Called(caseID)

	if len(ret) == 0 {
		panic("no return value specified for GetCaseByID")
	}

	var r0 domain.Case
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Case, error)); ok {
		return rf(caseID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Case); ok {
		r0 = rf(caseID)
	} else {
		r0 = ret.Get(0).(domain.Case)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(caseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCaseWithPersonInfo provides a mock function with given fields: caseID
func (_m *CaseRepo) GetCaseWithPersonInfo(caseID string) (domain.Case, error) {
	ret := _m.Called(caseID)

	if len(ret) == 0 {
		panic("no return value specified for GetCaseWithPersonInfo")
	}

	var r0 domain.Case
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Case, error)); ok {
		return rf(caseID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Case); ok {
		r0 = rf(caseID)
	} else {
		r0 = ret.Get(0).(domain.Case)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(caseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCase provides a mock function with given fields: c
func (_m *CaseRepo) InsertCase(c domain.Case) (string, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for InsertCase")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Case) (string, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(domain.Case) string); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domain.Case) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCaseFineDecision provides a mock function with given fields: caseID, fineDecision, solvedAt
func (_m *CaseRepo) SetCaseFineDecision(caseID string, fineDecision bool, solvedAt time.Time) error {
	ret := _m.Called(caseID, fineDecision, solvedAt)

	if len(ret) == 0 {
		panic("no return value specified for SetCaseFineDecision")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool, time.Time) error); ok {
		r0 = rf(caseID, fineDecision, solvedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCaseRequiredSkill provides a mock function with given fields: caseID, requiredSkill
func (_m *CaseRepo) UpdateCaseRequiredSkill(caseID string, requiredSkill int) error {
	ret := _m.Called(caseID, requiredSkill)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCaseRequiredSkill")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(caseID, requiredSkill)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCaseRepo creates a new instance of CaseRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCaseRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *CaseRepo {
	mock := &CaseRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
