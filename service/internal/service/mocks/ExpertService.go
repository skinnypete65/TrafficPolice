// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	domain "TrafficPolice/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// ExpertService is an autogenerated mock type for the ExpertService type
type ExpertService struct {
	mock.Mock
}

// GetCase provides a mock function with given fields: userID
func (_m *ExpertService) GetCase(userID string) (domain.Case, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCase")
	}

	var r0 domain.Case
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Case, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Case); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(domain.Case)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCaseWithPersonInfo provides a mock function with given fields: caseID
func (_m *ExpertService) GetCaseWithPersonInfo(caseID string) (domain.Case, error) {
	ret := _m.Called(caseID)

	if len(ret) == 0 {
		panic("no return value specified for GetCaseWithPersonInfo")
	}

	var r0 domain.Case
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Case, error)); ok {
		return rf(caseID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Case); ok {
		r0 = rf(caseID)
	} else {
		r0 = ret.Get(0).(domain.Case)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(caseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExpertByUserID provides a mock function with given fields: userID
func (_m *ExpertService) GetExpertByUserID(userID string) (domain.Expert, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetExpertByUserID")
	}

	var r0 domain.Expert
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Expert, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Expert); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(domain.Expert)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCaseDecision provides a mock function with given fields: decision
func (_m *ExpertService) SetCaseDecision(decision domain.Decision) (domain.CaseDecisionInfo, error) {
	ret := _m.Called(decision)

	if len(ret) == 0 {
		panic("no return value specified for SetCaseDecision")
	}

	var r0 domain.CaseDecisionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Decision) (domain.CaseDecisionInfo, error)); ok {
		return rf(decision)
	}
	if rf, ok := ret.Get(0).(func(domain.Decision) domain.CaseDecisionInfo); ok {
		r0 = rf(decision)
	} else {
		r0 = ret.Get(0).(domain.CaseDecisionInfo)
	}

	if rf, ok := ret.Get(1).(func(domain.Decision) error); ok {
		r1 = rf(decision)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExpertService creates a new instance of ExpertService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpertService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExpertService {
	mock := &ExpertService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
