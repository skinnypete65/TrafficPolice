// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	domain "TrafficPolice/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// CameraService is an autogenerated mock type for the CameraService type
type CameraService struct {
	mock.Mock
}

// AddCameraType provides a mock function with given fields: cameraType
func (_m *CameraService) AddCameraType(cameraType domain.CameraType) (string, error) {
	ret := _m.Called(cameraType)

	if len(ret) == 0 {
		panic("no return value specified for AddCameraType")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.CameraType) (string, error)); ok {
		return rf(cameraType)
	}
	if rf, ok := ret.Get(0).(func(domain.CameraType) string); ok {
		r0 = rf(cameraType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domain.CameraType) error); ok {
		r1 = rf(cameraType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCameraTypeByCameraID provides a mock function with given fields: cameraID
func (_m *CameraService) GetCameraTypeByCameraID(cameraID string) (string, error) {
	ret := _m.Called(cameraID)

	if len(ret) == 0 {
		panic("no return value specified for GetCameraTypeByCameraID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(cameraID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(cameraID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cameraID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCameraService creates a new instance of CameraService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCameraService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CameraService {
	mock := &CameraService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
