// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	domain "TrafficPolice/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// DirectorService is an autogenerated mock type for the DirectorService type
type DirectorService struct {
	mock.Mock
}

// GetCase provides a mock function with given fields: caseID
func (_m *DirectorService) GetCase(caseID string) (domain.CaseStatus, error) {
	ret := _m.Called(caseID)

	if len(ret) == 0 {
		panic("no return value specified for GetCase")
	}

	var r0 domain.CaseStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.CaseStatus, error)); ok {
		return rf(caseID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.CaseStatus); ok {
		r0 = rf(caseID)
	} else {
		r0 = ret.Get(0).(domain.CaseStatus)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(caseID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExpertAnalytics provides a mock function with given fields: expertID, startTime, endTime
func (_m *DirectorService) GetExpertAnalytics(expertID string, startTime time.Time, endTime time.Time) ([]domain.AnalyticsInterval, error) {
	ret := _m.Called(expertID, startTime, endTime)

	if len(ret) == 0 {
		panic("no return value specified for GetExpertAnalytics")
	}

	var r0 []domain.AnalyticsInterval
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) ([]domain.AnalyticsInterval, error)); ok {
		return rf(expertID, startTime, endTime)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) []domain.AnalyticsInterval); ok {
		r0 = rf(expertID, startTime, endTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AnalyticsInterval)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time) error); ok {
		r1 = rf(expertID, startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExpertSkill provides a mock function with given fields: expertID, skill
func (_m *DirectorService) UpdateExpertSkill(expertID string, skill int) error {
	ret := _m.Called(expertID, skill)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExpertSkill")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(expertID, skill)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDirectorService creates a new instance of DirectorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDirectorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DirectorService {
	mock := &DirectorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
