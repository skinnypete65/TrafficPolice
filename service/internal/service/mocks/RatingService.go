// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	domain "TrafficPolice/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// RatingService is an autogenerated mock type for the RatingService type
type RatingService struct {
	mock.Mock
}

// GetRating provides a mock function with given fields:
func (_m *RatingService) GetRating() ([]domain.RatingInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRating")
	}

	var r0 []domain.RatingInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.RatingInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.RatingInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.RatingInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunReportPeriod provides a mock function with given fields: done
func (_m *RatingService) RunReportPeriod(done <-chan struct{}) {
	_m.Called(done)
}

// SetRating provides a mock function with given fields: caseDecision
func (_m *RatingService) SetRating(caseDecision domain.CaseDecisionInfo) error {
	ret := _m.Called(caseDecision)

	if len(ret) == 0 {
		panic("no return value specified for SetRating")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.CaseDecisionInfo) error); ok {
		r0 = rf(caseDecision)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRatingService creates a new instance of RatingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRatingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RatingService {
	mock := &RatingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
